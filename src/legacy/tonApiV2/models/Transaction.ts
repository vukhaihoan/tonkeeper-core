/* tslint:disable */
/* eslint-disable */
/**
 * REST api to TON blockchain explorer
 * Provide access to indexed TON blockchain
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@tonkeeper.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AccountAddress } from './AccountAddress';
import {
    AccountAddressFromJSON,
    AccountAddressFromJSONTyped,
    AccountAddressToJSON,
} from './AccountAddress';
import type { AccountStatus } from './AccountStatus';
import {
    AccountStatusFromJSON,
    AccountStatusFromJSONTyped,
    AccountStatusToJSON,
} from './AccountStatus';
import type { ActionPhase } from './ActionPhase';
import {
    ActionPhaseFromJSON,
    ActionPhaseFromJSONTyped,
    ActionPhaseToJSON,
} from './ActionPhase';
import type { BouncePhaseType } from './BouncePhaseType';
import {
    BouncePhaseTypeFromJSON,
    BouncePhaseTypeFromJSONTyped,
    BouncePhaseTypeToJSON,
} from './BouncePhaseType';
import type { ComputePhase } from './ComputePhase';
import {
    ComputePhaseFromJSON,
    ComputePhaseFromJSONTyped,
    ComputePhaseToJSON,
} from './ComputePhase';
import type { CreditPhase } from './CreditPhase';
import {
    CreditPhaseFromJSON,
    CreditPhaseFromJSONTyped,
    CreditPhaseToJSON,
} from './CreditPhase';
import type { Message } from './Message';
import {
    MessageFromJSON,
    MessageFromJSONTyped,
    MessageToJSON,
} from './Message';
import type { StoragePhase } from './StoragePhase';
import {
    StoragePhaseFromJSON,
    StoragePhaseFromJSONTyped,
    StoragePhaseToJSON,
} from './StoragePhase';
import type { TransactionType } from './TransactionType';
import {
    TransactionTypeFromJSON,
    TransactionTypeFromJSONTyped,
    TransactionTypeToJSON,
} from './TransactionType';

/**
 * 
 * @export
 * @interface Transaction
 */
export interface Transaction {
    /**
     * 
     * @type {string}
     * @memberof Transaction
     */
    hash: string;
    /**
     * 
     * @type {number}
     * @memberof Transaction
     */
    lt: number;
    /**
     * 
     * @type {AccountAddress}
     * @memberof Transaction
     */
    account: AccountAddress;
    /**
     * 
     * @type {boolean}
     * @memberof Transaction
     */
    success: boolean;
    /**
     * 
     * @type {number}
     * @memberof Transaction
     */
    utime: number;
    /**
     * 
     * @type {AccountStatus}
     * @memberof Transaction
     */
    origStatus: AccountStatus;
    /**
     * 
     * @type {AccountStatus}
     * @memberof Transaction
     */
    endStatus: AccountStatus;
    /**
     * 
     * @type {number}
     * @memberof Transaction
     */
    totalFees: number;
    /**
     * 
     * @type {TransactionType}
     * @memberof Transaction
     */
    transactionType: TransactionType;
    /**
     * 
     * @type {string}
     * @memberof Transaction
     */
    stateUpdateOld: string;
    /**
     * 
     * @type {string}
     * @memberof Transaction
     */
    stateUpdateNew: string;
    /**
     * 
     * @type {Message}
     * @memberof Transaction
     */
    inMsg?: Message;
    /**
     * 
     * @type {Array<Message>}
     * @memberof Transaction
     */
    outMsgs: Array<Message>;
    /**
     * 
     * @type {string}
     * @memberof Transaction
     */
    block: string;
    /**
     * 
     * @type {string}
     * @memberof Transaction
     */
    prevTransHash?: string;
    /**
     * 
     * @type {number}
     * @memberof Transaction
     */
    prevTransLt?: number;
    /**
     * 
     * @type {ComputePhase}
     * @memberof Transaction
     */
    computePhase?: ComputePhase;
    /**
     * 
     * @type {StoragePhase}
     * @memberof Transaction
     */
    storagePhase?: StoragePhase;
    /**
     * 
     * @type {CreditPhase}
     * @memberof Transaction
     */
    creditPhase?: CreditPhase;
    /**
     * 
     * @type {ActionPhase}
     * @memberof Transaction
     */
    actionPhase?: ActionPhase;
    /**
     * 
     * @type {BouncePhaseType}
     * @memberof Transaction
     */
    bouncePhase?: BouncePhaseType;
    /**
     * 
     * @type {boolean}
     * @memberof Transaction
     */
    aborted: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Transaction
     */
    destroyed: boolean;
}

/**
 * Check if a given object implements the Transaction interface.
 */
export function instanceOfTransaction(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "hash" in value;
    isInstance = isInstance && "lt" in value;
    isInstance = isInstance && "account" in value;
    isInstance = isInstance && "success" in value;
    isInstance = isInstance && "utime" in value;
    isInstance = isInstance && "origStatus" in value;
    isInstance = isInstance && "endStatus" in value;
    isInstance = isInstance && "totalFees" in value;
    isInstance = isInstance && "transactionType" in value;
    isInstance = isInstance && "stateUpdateOld" in value;
    isInstance = isInstance && "stateUpdateNew" in value;
    isInstance = isInstance && "outMsgs" in value;
    isInstance = isInstance && "block" in value;
    isInstance = isInstance && "aborted" in value;
    isInstance = isInstance && "destroyed" in value;

    return isInstance;
}

export function TransactionFromJSON(json: any): Transaction {
    return TransactionFromJSONTyped(json, false);
}

export function TransactionFromJSONTyped(json: any, ignoreDiscriminator: boolean): Transaction {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'hash': json['hash'],
        'lt': json['lt'],
        'account': AccountAddressFromJSON(json['account']),
        'success': json['success'],
        'utime': json['utime'],
        'origStatus': AccountStatusFromJSON(json['orig_status']),
        'endStatus': AccountStatusFromJSON(json['end_status']),
        'totalFees': json['total_fees'],
        'transactionType': TransactionTypeFromJSON(json['transaction_type']),
        'stateUpdateOld': json['state_update_old'],
        'stateUpdateNew': json['state_update_new'],
        'inMsg': !exists(json, 'in_msg') ? undefined : MessageFromJSON(json['in_msg']),
        'outMsgs': ((json['out_msgs'] as Array<any>).map(MessageFromJSON)),
        'block': json['block'],
        'prevTransHash': !exists(json, 'prev_trans_hash') ? undefined : json['prev_trans_hash'],
        'prevTransLt': !exists(json, 'prev_trans_lt') ? undefined : json['prev_trans_lt'],
        'computePhase': !exists(json, 'compute_phase') ? undefined : ComputePhaseFromJSON(json['compute_phase']),
        'storagePhase': !exists(json, 'storage_phase') ? undefined : StoragePhaseFromJSON(json['storage_phase']),
        'creditPhase': !exists(json, 'credit_phase') ? undefined : CreditPhaseFromJSON(json['credit_phase']),
        'actionPhase': !exists(json, 'action_phase') ? undefined : ActionPhaseFromJSON(json['action_phase']),
        'bouncePhase': !exists(json, 'bounce_phase') ? undefined : BouncePhaseTypeFromJSON(json['bounce_phase']),
        'aborted': json['aborted'],
        'destroyed': json['destroyed'],
    };
}

export function TransactionToJSON(value?: Transaction | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'hash': value.hash,
        'lt': value.lt,
        'account': AccountAddressToJSON(value.account),
        'success': value.success,
        'utime': value.utime,
        'orig_status': AccountStatusToJSON(value.origStatus),
        'end_status': AccountStatusToJSON(value.endStatus),
        'total_fees': value.totalFees,
        'transaction_type': TransactionTypeToJSON(value.transactionType),
        'state_update_old': value.stateUpdateOld,
        'state_update_new': value.stateUpdateNew,
        'in_msg': MessageToJSON(value.inMsg),
        'out_msgs': ((value.outMsgs as Array<any>).map(MessageToJSON)),
        'block': value.block,
        'prev_trans_hash': value.prevTransHash,
        'prev_trans_lt': value.prevTransLt,
        'compute_phase': ComputePhaseToJSON(value.computePhase),
        'storage_phase': StoragePhaseToJSON(value.storagePhase),
        'credit_phase': CreditPhaseToJSON(value.creditPhase),
        'action_phase': ActionPhaseToJSON(value.actionPhase),
        'bounce_phase': BouncePhaseTypeToJSON(value.bouncePhase),
        'aborted': value.aborted,
        'destroyed': value.destroyed,
    };
}

