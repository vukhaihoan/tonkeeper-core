/* tslint:disable */
/* eslint-disable */
/**
 * REST api to TON blockchain explorer
 * Provide access to indexed TON blockchain
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@tonkeeper.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AccountAddress } from './AccountAddress';
import {
    AccountAddressFromJSON,
    AccountAddressFromJSONTyped,
    AccountAddressToJSON,
} from './AccountAddress';
import type { JettonPreview } from './JettonPreview';
import {
    JettonPreviewFromJSON,
    JettonPreviewFromJSONTyped,
    JettonPreviewToJSON,
} from './JettonPreview';

/**
 * 
 * @export
 * @interface JettonQuantity
 */
export interface JettonQuantity {
    /**
     * 
     * @type {string}
     * @memberof JettonQuantity
     */
    quantity: string;
    /**
     * 
     * @type {AccountAddress}
     * @memberof JettonQuantity
     */
    walletAddress: AccountAddress;
    /**
     * 
     * @type {JettonPreview}
     * @memberof JettonQuantity
     */
    jetton: JettonPreview;
}

/**
 * Check if a given object implements the JettonQuantity interface.
 */
export function instanceOfJettonQuantity(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "quantity" in value;
    isInstance = isInstance && "walletAddress" in value;
    isInstance = isInstance && "jetton" in value;

    return isInstance;
}

export function JettonQuantityFromJSON(json: any): JettonQuantity {
    return JettonQuantityFromJSONTyped(json, false);
}

export function JettonQuantityFromJSONTyped(json: any, ignoreDiscriminator: boolean): JettonQuantity {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'quantity': json['quantity'],
        'walletAddress': AccountAddressFromJSON(json['wallet_address']),
        'jetton': JettonPreviewFromJSON(json['jetton']),
    };
}

export function JettonQuantityToJSON(value?: JettonQuantity | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'quantity': value.quantity,
        'wallet_address': AccountAddressToJSON(value.walletAddress),
        'jetton': JettonPreviewToJSON(value.jetton),
    };
}

