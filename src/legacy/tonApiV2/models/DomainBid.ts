/* tslint:disable */
/* eslint-disable */
/**
 * REST api to TON blockchain explorer
 * Provide access to indexed TON blockchain
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@tonkeeper.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AccountAddress } from './AccountAddress';
import {
    AccountAddressFromJSON,
    AccountAddressFromJSONTyped,
    AccountAddressToJSON,
} from './AccountAddress';

/**
 * 
 * @export
 * @interface DomainBid
 */
export interface DomainBid {
    /**
     * 
     * @type {boolean}
     * @memberof DomainBid
     */
    success: boolean;
    /**
     * 
     * @type {number}
     * @memberof DomainBid
     */
    value: number;
    /**
     * 
     * @type {number}
     * @memberof DomainBid
     */
    txTime: number;
    /**
     * 
     * @type {string}
     * @memberof DomainBid
     */
    txHash: string;
    /**
     * 
     * @type {AccountAddress}
     * @memberof DomainBid
     */
    bidder: AccountAddress;
}

/**
 * Check if a given object implements the DomainBid interface.
 */
export function instanceOfDomainBid(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "success" in value;
    isInstance = isInstance && "value" in value;
    isInstance = isInstance && "txTime" in value;
    isInstance = isInstance && "txHash" in value;
    isInstance = isInstance && "bidder" in value;

    return isInstance;
}

export function DomainBidFromJSON(json: any): DomainBid {
    return DomainBidFromJSONTyped(json, false);
}

export function DomainBidFromJSONTyped(json: any, ignoreDiscriminator: boolean): DomainBid {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'success': json['success'],
        'value': json['value'],
        'txTime': json['txTime'],
        'txHash': json['txHash'],
        'bidder': AccountAddressFromJSON(json['bidder']),
    };
}

export function DomainBidToJSON(value?: DomainBid | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'success': value.success,
        'value': value.value,
        'txTime': value.txTime,
        'txHash': value.txHash,
        'bidder': AccountAddressToJSON(value.bidder),
    };
}

