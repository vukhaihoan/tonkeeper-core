/* tslint:disable */
/* eslint-disable */
/**
 * REST api to TON blockchain explorer
 * Provide access to indexed TON blockchain
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@tonkeeper.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AccountStorageInfo } from './AccountStorageInfo';
import {
    AccountStorageInfoFromJSON,
    AccountStorageInfoFromJSONTyped,
    AccountStorageInfoToJSON,
} from './AccountStorageInfo';

/**
 * 
 * @export
 * @interface RawAccount
 */
export interface RawAccount {
    /**
     * 
     * @type {string}
     * @memberof RawAccount
     */
    address: string;
    /**
     * 
     * @type {number}
     * @memberof RawAccount
     */
    balance: number;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof RawAccount
     */
    extraBalance?: { [key: string]: string; };
    /**
     * 
     * @type {string}
     * @memberof RawAccount
     */
    code?: string;
    /**
     * 
     * @type {string}
     * @memberof RawAccount
     */
    data?: string;
    /**
     * 
     * @type {number}
     * @memberof RawAccount
     */
    lastTransactionLt: number;
    /**
     * 
     * @type {string}
     * @memberof RawAccount
     */
    status: string;
    /**
     * 
     * @type {AccountStorageInfo}
     * @memberof RawAccount
     */
    storage: AccountStorageInfo;
}

/**
 * Check if a given object implements the RawAccount interface.
 */
export function instanceOfRawAccount(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "address" in value;
    isInstance = isInstance && "balance" in value;
    isInstance = isInstance && "lastTransactionLt" in value;
    isInstance = isInstance && "status" in value;
    isInstance = isInstance && "storage" in value;

    return isInstance;
}

export function RawAccountFromJSON(json: any): RawAccount {
    return RawAccountFromJSONTyped(json, false);
}

export function RawAccountFromJSONTyped(json: any, ignoreDiscriminator: boolean): RawAccount {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'address': json['address'],
        'balance': json['balance'],
        'extraBalance': !exists(json, 'extra_balance') ? undefined : json['extra_balance'],
        'code': !exists(json, 'code') ? undefined : json['code'],
        'data': !exists(json, 'data') ? undefined : json['data'],
        'lastTransactionLt': json['last_transaction_lt'],
        'status': json['status'],
        'storage': AccountStorageInfoFromJSON(json['storage']),
    };
}

export function RawAccountToJSON(value?: RawAccount | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'address': value.address,
        'balance': value.balance,
        'extra_balance': value.extraBalance,
        'code': value.code,
        'data': value.data,
        'last_transaction_lt': value.lastTransactionLt,
        'status': value.status,
        'storage': AccountStorageInfoToJSON(value.storage),
    };
}

