/* tslint:disable */
/* eslint-disable */
/**
 * REST api to TON blockchain explorer
 * Provide access to indexed TON blockchain
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@tonkeeper.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { WalletDNS } from './WalletDNS';
import {
    WalletDNSFromJSON,
    WalletDNSFromJSONTyped,
    WalletDNSToJSON,
} from './WalletDNS';

/**
 * 
 * @export
 * @interface DnsRecord
 */
export interface DnsRecord {
    /**
     * 
     * @type {WalletDNS}
     * @memberof DnsRecord
     */
    wallet?: WalletDNS;
    /**
     * 
     * @type {string}
     * @memberof DnsRecord
     */
    nextResolver?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof DnsRecord
     */
    sites: Array<string>;
    /**
     * tonstorage bag id
     * @type {string}
     * @memberof DnsRecord
     */
    storage?: string;
}

/**
 * Check if a given object implements the DnsRecord interface.
 */
export function instanceOfDnsRecord(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "sites" in value;

    return isInstance;
}

export function DnsRecordFromJSON(json: any): DnsRecord {
    return DnsRecordFromJSONTyped(json, false);
}

export function DnsRecordFromJSONTyped(json: any, ignoreDiscriminator: boolean): DnsRecord {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'wallet': !exists(json, 'wallet') ? undefined : WalletDNSFromJSON(json['wallet']),
        'nextResolver': !exists(json, 'next_resolver') ? undefined : json['next_resolver'],
        'sites': json['sites'],
        'storage': !exists(json, 'storage') ? undefined : json['storage'],
    };
}

export function DnsRecordToJSON(value?: DnsRecord | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'wallet': WalletDNSToJSON(value.wallet),
        'next_resolver': value.nextResolver,
        'sites': value.sites,
        'storage': value.storage,
    };
}

