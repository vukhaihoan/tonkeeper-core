/* tslint:disable */
/* eslint-disable */
/**
 * REST api to TON blockchain explorer
 * Provide access to indexed TON blockchain
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@tonkeeper.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { JettonMetadata } from './JettonMetadata';
import {
    JettonMetadataFromJSON,
    JettonMetadataFromJSONTyped,
    JettonMetadataToJSON,
} from './JettonMetadata';
import type { JettonVerificationType } from './JettonVerificationType';
import {
    JettonVerificationTypeFromJSON,
    JettonVerificationTypeFromJSONTyped,
    JettonVerificationTypeToJSON,
} from './JettonVerificationType';

/**
 * 
 * @export
 * @interface JettonInfo
 */
export interface JettonInfo {
    /**
     * 
     * @type {boolean}
     * @memberof JettonInfo
     */
    mintable: boolean;
    /**
     * 
     * @type {string}
     * @memberof JettonInfo
     */
    totalSupply: string;
    /**
     * 
     * @type {JettonMetadata}
     * @memberof JettonInfo
     */
    metadata: JettonMetadata;
    /**
     * 
     * @type {JettonVerificationType}
     * @memberof JettonInfo
     */
    verification: JettonVerificationType;
}

/**
 * Check if a given object implements the JettonInfo interface.
 */
export function instanceOfJettonInfo(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "mintable" in value;
    isInstance = isInstance && "totalSupply" in value;
    isInstance = isInstance && "metadata" in value;
    isInstance = isInstance && "verification" in value;

    return isInstance;
}

export function JettonInfoFromJSON(json: any): JettonInfo {
    return JettonInfoFromJSONTyped(json, false);
}

export function JettonInfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): JettonInfo {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'mintable': json['mintable'],
        'totalSupply': json['total_supply'],
        'metadata': JettonMetadataFromJSON(json['metadata']),
        'verification': JettonVerificationTypeFromJSON(json['verification']),
    };
}

export function JettonInfoToJSON(value?: JettonInfo | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'mintable': value.mintable,
        'total_supply': value.totalSupply,
        'metadata': JettonMetadataToJSON(value.metadata),
        'verification': JettonVerificationTypeToJSON(value.verification),
    };
}

